from tkinter import *
from tkinter import ttk
from PIL import ImageTk
import sqlite3
import base64
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import yfinance as yf
import matplotlib.dates as mdates
import numpy as np

window = Tk()
canvas = None
data = None
fig = None

class Functions:
    def clean_stocks_entries(self):
        self.ticker_entry.delete(0, END)
        self.amount_entry.delete(0, END)
        self.amount_entry.insert(END, 0)

        self.create_graph()
        self.old_ticker = None
        self.create_div_graph()

        self.five_days_button.config(bg='black')
        self.thirty_days_button.config(bg='black')
        self.year_button.config(bg='black')

    def bd_connect(self):
        self.connect = sqlite3.connect('stocks_tracker.db')
        self.cursor = self.connect.cursor()

    def bd_disconnect(self):
        self.connect.close()

    def create_table(self):
        self.bd_connect()

        self.cursor.execute("""
            create table if not exists ticker_amount (
                ticker text not null,
                amount int not null,
                primary key (ticker)
            );""")

        self.connect.commit()
        self.bd_disconnect()

    def register_stock(self):
        self.ticker = self.ticker_entry.get().upper().strip()
        self.old_ticker = self.ticker
        self.amount = self.amount_entry.get()

        if not self.ticker:
            return

        try:
            int_amount = int(self.amount)
        except ValueError:
            return

        if self.old_ticker != 'A':
            try:
                print('Verificar se é uma ação estrangeira.')
                acao = yf.Ticker(f'{self.old_ticker}')
                informations = acao.history(period='1d')

                if not informations.empty:
                    print('Ação estrangeira')
                    self.bd_connect()
                    self.cursor.execute("""insert into ticker_amount (ticker, amount)
                        values (?, ?)""", (self.ticker, self.amount))
                    self.connect.commit()
                    self.show_table1()
                    self.five_days()
                    self.five_days_button.config(bg='#92000a')
                    self.create_div_graph()

                else:
                    print('Ação não estrangeira')
                    acao = yf.Ticker(f'{self.old_ticker}.SA')
                    informations = acao.history(period='1d')

                    if not informations.empty:
                        print('Ação com extensão .SA encontrada')
                        self.old_ticker = f'{self.old_ticker}.SA'
                        self.bd_connect()
                        self.cursor.execute("""insert into ticker_amount (ticker, amount)
                            values (?, ?)""", (self.ticker, self.amount))
                        self.connect.commit()
                        self.show_table1()
                        self.five_days()
                        self.five_days_button.config(bg='#92000a')
                        self.create_div_graph()
                
                    else:
                        print('Ação com extensão .SA também não encontrada')
            
            except Exception:
                print('ERRO')

        else:
            self.clean_stocks_entries()

    def show_table1(self):
        self.ticker_amount_table.delete(*self.ticker_amount_table.get_children())
        self.bd_connect()
        table1 = self.cursor.execute(""" select ticker, amount from ticker_amount; """)
        for i in table1:
            self.ticker_amount_table.insert('', END, values=i)
        self.bd_disconnect()

    def on_double_click(self, event):
        self.clean_stocks_entries()
        self.amount_entry.delete(0, END)
        selected_stock = self.ticker_amount_table.selection()

        if selected_stock:
            col1, col2 = self.ticker_amount_table.item(selected_stock[0], 'values')
            self.old_ticker = col1

            try:
                print('Verificar se é uma ação estrangeira.')
                acao = yf.Ticker(f'{self.old_ticker}')
                informations2 = acao.history(period='1d')

                if not informations2.empty:
                    self.ticker_entry.insert(END, col1)
                    self.amount_entry.insert(END, col2)
                    self.five_days_button.config(bg='#92000a')
                    self.five_days()
                    self.create_div_graph()

                else: 
                    print('Ação não estrangeira')
                    acao = yf.Ticker(f'{self.old_ticker}.SA')
                    informations2 = acao.history(period='1d')

                    if not informations2.empty:
                        self.old_ticker = f'{self.old_ticker}.SA'
                        self.ticker_entry.insert(END, col1)
                        self.amount_entry.insert(END, col2)
                        self.five_days_button.config(bg='#92000a')
                        self.five_days()
                        self.create_div_graph()

            except Exception:
                    print(f"ERRO.")

    def five_days(self):
        if self.old_ticker:
            ticker = self.old_ticker
            self.create_graph(ticker, "5d")

        self.thirty_days_button.config(bg='black')
        self.year_button.config(bg='black')

    def thirty_days(self):
        if self.old_ticker:
            ticker = self.old_ticker
            self.create_graph(ticker, "30d")

        self.five_days_button.config(bg='black')
        self.year_button.config(bg='black')

    def year(self):
        if self.old_ticker:
            ticker = self.old_ticker
            self.create_graph(ticker, "1y")

        self.five_days_button.config(bg='black')
        self.thirty_days_button.config(bg='black')

    def create_graph(self, ticker='', period=''):
        def currency_formatter(x, pos):
            return f"R${x:.2f}"

        fig, ax = plt.subplots()
        fig.subplots_adjust(left=0.1, right=0.99, top=1, bottom=0.07)

        if ticker != '':  # se alguma ação estiver selecionada
            data = yf.Ticker(ticker)
            df = data.history(period=period)
            ax.plot(df['Close'], color='k', linewidth=1)
            
            last_date = df.index[-1]
            last_price = df['Close'].iloc[-1]
            ax.plot(last_date, last_price, 'ko', markersize=3)  
            ax.annotate(f'R${last_price:.2f}', (last_date, last_price), textcoords="offset points", xytext=(0,5), ha='center')

            first_date = df.index[0]
            first_price = df['Close'].iloc[0]
            ax.plot(first_date, first_price, 'ko', markersize=3)  
            ax.annotate(f'R${first_price:.2f}', (first_date, first_price), textcoords="offset points", xytext=(0,5), ha='center')

        if period == '5d':
            date_format = mdates.DateFormatter('%d-%m-%Y')
            ax.xaxis.set_major_formatter(date_format)
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
        elif period == '30d':
            date_format = mdates.DateFormatter('%d-%m-%Y')
            ax.xaxis.set_major_formatter(date_format)
            ax.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))
        elif period == '1y':
            date_format = mdates.DateFormatter('%m-%Y')
            ax.xaxis.set_major_formatter(date_format)
            ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))

        if ticker == '':  # se nenhuma ação estiver selecionada
            if self.language == 'pt':
                text = 'SELECIONE OU REGISTRE \n           UMA AÇÃO'
                ax.text(0.171, 0.41, text, alpha=0.5, fontsize=27, color='white')
            elif self.language == 'en':
                text = 'SELECT OR REGISTER \n           A STOCK'
                ax.text(0.215, 0.42, text, alpha=0.5, fontsize=27, color='white')
            else:
                ax.bar([], [])

        ax.set_facecolor('#880808')
        ax.grid(True, linestyle='-', alpha=0.5)

        ax.yaxis.set_major_formatter(currency_formatter)

        canvas = FigureCanvasTkAgg(fig, master=self.frame_graph)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.place(rely=0.1, relx=0, relheight=0.9, relwidth=1)
        canvas.draw()

        plt.close(fig)

    def create_div_graph(self):
        global dividends

        def currency_formatter(x, pos):
            return f"R${x:.2f}"

        if self.old_ticker:  # se tiver alguma alguma ação selecionada
            ticker = self.old_ticker
            div_data = yf.Ticker(ticker)
            dividends = div_data.dividends
            dividends_last12 = dividends.tail(12)

            if not dividends.empty:  # se a ação selecionada tiver dividendos
                fig2, ax2 = plt.subplots()
                fig2.subplots_adjust(left=0.1, right=1, top=1, bottom=0.07)
                fig2.subplots_adjust(left=0.1, right=1, top=1, bottom=0.07)

                bar_width = 0.8

                total_width = len(dividends_last12) * bar_width

                positions = np.arange(len(dividends_last12))

                ax2.bar(positions, dividends_last12, width=bar_width, color='black')

                ax2.set_xticks(positions)
                ax2.set_xticklabels([d.strftime('%m-%y') for d in dividends_last12.index])

                ax2.set_facecolor('#880808')
                ax2.grid(True, linestyle='-', alpha=0.5)

                ax2.yaxis.set_major_formatter(currency_formatter)

                canvas = FigureCanvasTkAgg(fig2, master=self.dividends_graph)
                canvas_widget = canvas.get_tk_widget()
                canvas_widget.place(rely=0, relx=0, relheight=1, relwidth=1)
                canvas.draw()

                plt.close(fig2)

            else:  # se a ação selecionada não tiver dividendos
                fig2, ax2 = plt.subplots()
                fig2.subplots_adjust(left=0.1, right=0.99, top=1, bottom=0.07)
                ax2.set_facecolor('#880808')
                ax2.grid(True, linestyle='-', alpha=0.5)

                if self.language == 'pt':
                    text = 'DIVIDENDOS NÃO ENCONTRADOS'
                    ax2.text(0.045, 0.47, text, alpha=0.5, fontsize=25, color='white')
                elif self.language == 'en':
                    text = 'DIVIDENDS NOT FOUND'
                    ax2.text(0.175, 0.47, text, alpha=0.5, fontsize=25, color='white')
                else:
                    ax2.bar([], [])
                ax2.yaxis.set_major_formatter(currency_formatter)

                canvas = FigureCanvasTkAgg(fig2, master=self.dividends_graph)
                canvas_widget = canvas.get_tk_widget()
                canvas_widget.place(rely=0, relx=0, relheight=1, relwidth=1)
                canvas.draw()

                plt.close(fig2)

        else:  # se nenhuma ação está selecionada
            fig2, ax2 = plt.subplots()
            fig2.subplots_adjust(left=0.1, right=0.99, top=1, bottom=0.07)
            ax2.set_facecolor('#880808')
            ax2.grid(True, linestyle='-', alpha=0.5)

            print(self.language)
            if self.language == 'pt':
                text = 'SELECIONE OU REGISTRE \n           UMA AÇÃO'
                ax2.text(0.155, 0.4, text, alpha=0.5, fontsize=25, color='white')
            elif self.language == 'en':
                text = 'SELECT OR REGISTER \n           A STOCK'
                ax2.text(0.205, 0.41, text, alpha=0.5, fontsize=25, color='white')
            else:
                ax2.bar([], [])
            ax2.yaxis.set_major_formatter(currency_formatter)

            canvas = FigureCanvasTkAgg(fig2, master=self.dividends_graph)
            canvas_widget = canvas.get_tk_widget()
            canvas_widget.place(rely=0, relx=0, relheight=1, relwidth=1)
            canvas.draw()

            plt.close(fig2)

    def delete_stock(self):
        self.ticker = self.ticker_entry.get().upper()

        if self.ticker:
            self.amount = self.amount_entry.get()

            self.bd_connect()
            self.cursor.execute(""" delete from ticker_amount where ticker = ?""", (self.ticker,))
            self.connect.commit()

            self.bd_disconnect()
            self.clean_stocks_entries()
            self.show_table1()
            self.old_ticker = None
            self.create_div_graph()
            self.five_days_button.config(bg='black')
            self.thirty_days_button.config(bg='black')
            self.year_button.config(bg='black')

    def update_info(self):
        self.ticker = self.ticker_entry.get().upper().strip()
        self.amount = self.amount_entry.get()

        if not self.ticker or not self.amount:
            return

        self.bd_connect()

        self.cursor.execute(""" update ticker_amount set ticker = ?, amount = ? where ticker = ?""",
                            (self.ticker, self.amount, self.old_ticker))

        self.connect.commit()
        self.bd_disconnect()

        self.show_table1()

        self.ticker_entry.delete(0, END)
        self.amount_entry.delete(0, END)
        self.amount_entry.insert(END, 0)

    def images_64(self):
        self.china = '/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAARABkDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwCKZ9POl2a2Uc/9ph8yEnIOemOOeg/PvWfdY83+HO0bsZ645znvmoaWvj4U+XqfrsYcvUSiiirLCiiigAooooA//9k='

        self.usa = '/9j/4AAQSkZJRgABAQEBLAEsAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAANABkDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDnIfDGtjOdB1XPvZSZ6+uOvXn1yf4q6zw54dmTSYheaVLHNk5WXS3ZgM8dbCXAx0G84HHHQcz/AMJhpf8A0Ah/37sP/kOk/wCEw0v/AKAQ/wC/dh/8h0YnMfrEOVqx9rguHMRhKjqJ30t0/wAzuf7AT/oHD/wUt/8AKuj+wE/6Bw/8FLf/ACrrhv8AhMNL/wCgEP8Av3Yf/IdH/CYaX/0Ah/37sP8A5Drh54nq/wBn4nt+KP/Z'

        self.pt_br = '/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAASABkDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD5t+EXwW+JPx28T2/hb4beG77Xr8EnVr1v9C0LSdP4xqWsasfl0YKAOT9DwADofEnxL+zL8DbzWPhx8VvAn7V5m0/xR/wi2vftV6L8MPsPwG8N+IMnR8aTpOtf8T/xn4Iyf+Rg/wCKY8U+Kv7HJ8H+Es/8jR7z+yl+2141/ZilHht9PsfFvwv1HU/tep+Hdp0/XrPUP+gnpWqnuMnI8Qsw96+AYv8Agnlr1r8S9e+MvwQ/ah+GPgf9nvUNeN1deLdb8T+J9D+LfhDw/rOp6vq//CCeLfhONCz401v+wx/YA8P+HT4n8K/FI6MSOpr+IfD2OQZv4ieIuXePudvgTg3KOHMql4dZ3w/HOZPP+IFFvNo5xm39lp/2s5rK45blX9mLLsw2vjOn+Z3gRwZ4B5twV/abrribjaUs4XEeSZ/KGTf2FkbUbyyZ81qkre9/ai5ngGl/uT1X0f8AGH9nr4ifBK406bxZYQar4P8AE9rp2q+DfiB4Zu/7b8CeMdO1Yf2tpGpaVqvQFvvHQiCQ3ODXhWU/uH/vv/7Gv0C/aG/be1L4h/D/AEj4DfCrSYPBvwb8P6B4e8G2Y1PStM/t7xPYeEtMGj6QP7L0X/in/BWi40rcPD/h75SM/MMg18C/Y7v/AJ5P/wB9D/4qvD8Ms448x/Dyr8eZZj8Lm31ipHALLcJ/aGKqcPxlbJ6mb4f3f7LzF4fmdXAJJU9HZN2P5v8AGXKPC7JuNsfgPCviDOcdw5Ts+fP8QsHCniJO0qeU4qMZPNMuTuqWOm71LK2lmVKKKK+9zH4V/wBf6P8A6VTPyXLf4tf/AK8V/wAohTt7/wB5vzP+NFFelR+OfpS/Q8yrvT/69x/9KR//2Q=='

        self.flower64 = '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'

        self.spider64 = ''

    def pt_language(self):
        self.language = 'pt'

        if not self.old_ticker:  # se nenhuma ação estiver selecionada
            self.create_graph()
            self.create_div_graph()

        if self.old_ticker:  # se tiver ação, mas não tiver dividendos
            if dividends.empty:
                self.create_div_graph()

        self.language_line.place(relx=0.003, rely=0.039, relwidth=0.02, relheight=0.002)

        self.new_button.config(text='Adicionar')
        self.clean_button.config(text='Limpar')
        self.delete_button.config(text='Deletar')
        self.update_button.config(text='Atualizar')
        self.five_days_button.config(text='5 DIAS')
        self.thirty_days_button.config(text='30 DIAS')
        self.year_button.config(text='1 ANO')

        self.texts()
        self.ticker_amount_table.heading('#1', text='Ticker')
        self.ticker_amount_table.heading('#2', text='Quantidade')

    def usa_language(self):
        self.language = 'en'

        if not self.old_ticker:
            self.create_graph()
            self.create_div_graph()

        if self.old_ticker:
            if dividends.empty:  # se não tiver dividendos
                self.create_div_graph()

        self.language_line.place(relx=0.028, rely=0.039, relwidth=0.02, relheight=0.002)

        self.ticker_text.config(text='Symbol')
        self.ticker_text.place(relx=0.01, rely=0.31, relwidth=0.05, relheight=0.025)

        self.amount_text.config(text='Amount')
        self.amount_text.place(relx=0.011, rely=0.375, relwidth=0.05, relheight=0.025)

        self.ticker_amount_table.heading('#1', text='Symbol')
        self.ticker_amount_table.heading('#2', text='Aumont')

        self.new_button.config(text='Add')
        self.clean_button.config(text='Clean')
        self.delete_button.config(text='Delete')
        self.update_button.config(text='Update')
        self.five_days_button.config(text='5 DAYS')
        self.thirty_days_button.config(text='30 DAYS')
        self.year_button.config(text='1 YEAR')

    def china_language(self):
        self.language = 'ch'

        if not self.old_ticker:
            self.create_graph()
            self.create_div_graph()

        if self.old_ticker:
            if dividends.empty:  # se não tiver dividendos
                self.create_div_graph()

        self.language_line.place(relx=0.053, rely=0.039, relwidth=0.02, relheight=0.002)

        self.ticker_text.config(text='象徵')
        self.ticker_text.place(relx=0.005, rely=0.31, relwidth=0.05, relheight=0.025)

        self.amount_text.config(text='數量')
        self.amount_text.place(relx=0.005, rely=0.375, relwidth=0.05, relheight=0.025)

        self.ticker_amount_table.heading('#1', text='象徵')
        self.ticker_amount_table.heading('#2', text='數量')

        self.new_button.config(text='加上')
        self.clean_button.config(text='清潔')
        self.delete_button.config(text='刪除')
        self.update_button.config(text='更新')
        self.five_days_button.config(text='5天')
        self.thirty_days_button.config(text='30天')
        self.year_button.config(text='1年')

class Aplication(Functions):
    def __init__(self):
        self.window = window
        self.old_ticker = None
        self.language = 'pt'
        self.images_64()
        self.screen_settings()
        self.images()
        self.frames()
        self.buttons()
        self.texts()
        self.entries()
        self.ticker_aumont_table()
        self.create_table()
        self.show_table1()
        self.create_graph()
        self.create_div_graph()
        window.mainloop()

        self.selected_button = None

    def screen_settings(self):
        self.window.title('Stocks Tracker')
        self.window.configure(background='#880808')  # cor de fundo
        self.window.geometry('1920x1080')  # dimensões da tela
        self.window.iconbitmap('lírio_icon.ico')
        self.window.state('zoomed')
        self.window.resizable(True, True)  # possibilidade de redimensionar a tela

    def images(self):
        self.spider_img = ImageTk.PhotoImage(data=base64.b64decode(self.spider64))
        self.spider_label = Label(self.window, image=self.spider_img, highlightbackground='#880808')
        self.spider_label.place(relx=0.105, rely=0.15, relwidth=0.3, relheight=0.7)

        self.flower_img = ImageTk.PhotoImage(data=base64.b64decode(self.flower64))
        self.flower_label = Label(self.window, image=self.flower_img, highlightbackground='#880808', bg='#880808')
        self.flower_label.place(relx=0.735, rely=0.66, relwidth=0.3, relheight=0.45)

        self.pt_br_img = ImageTk.PhotoImage(data=base64.b64decode(self.pt_br))

        self.usa_img = ImageTk.PhotoImage(data=base64.b64decode(self.usa))

        self.china_img = ImageTk.PhotoImage(data=base64.b64decode(self.china))

    def frames(self):
        self.frame_tabela_ticker_amount = Frame(self.window, highlightbackground='black', highlightthickness=4)
        self.frame_tabela_ticker_amount.place(relx=0.3, rely=0.05, relwidth=0.2, relheight=0.5)

        self.frame_graph = Frame(self.window, highlightbackground='black', highlightthickness=4)
        self.frame_graph.place(relx=0.537, rely=0.05, relwidth=0.43, relheight=0.5)

        self.frame_graph_buttons = Frame(self.frame_graph, background='black')
        self.frame_graph_buttons.place(relx=0.0, rely=0.0, relheight=0.1, relwidth=1)

        self.dividends_graph = Frame(self.window, highlightbackground='black', highlightthickness=4)
        self.dividends_graph.place(relx=0.39, rely=0.575, relwidth=0.38, relheight=0.4)

        self.language_line = Frame(self.window, highlightbackground='white')
        self.language_line.place(relx=0.003, rely=0.039, relwidth=0.02, relheight=0.002)

        self.separation_line = Frame(self.window, background='black')
        self.separation_line.place(relx=0.025, rely=0.005, relwidth=0.0008, relheight=0.04)

        self.separation_line2 = Frame(self.window, background='black')
        self.separation_line2.place(relx=0.05, rely=0.005, relwidth=0.0008, relheight=0.04)

    def buttons(self):
        self.new_button = Button(self.window, text='Adicionar', bg='#800020', fg='white', bd=3, font=('garamond', 11, 'bold'), command=self.register_stock,     activebackground='#92000a',activeforeground='white')
        self.new_button.bind("<Enter>", lambda event, button=self.new_button: button.config(bg='#92000a', fg='white'))
        self.new_button.bind("<Leave>", lambda event, button=self.new_button: button.config(bg='#800020', fg='white'))
        self.new_button.place(relx=0.02, rely=0.46, relwidth=0.05, relheight=0.03)

        self.clean_button = Button(self.window, text='Limpar', bg='#800020', fg='white', bd=3, font=('garamond', 11, 'bold'), command=self.clean_stocks_entries,
        activebackground='#92000a', activeforeground='white')
        self.clean_button.bind("<Enter>", lambda event, button=self.clean_button: button.config(bg='#92000a', fg='white'))
        self.clean_button.bind("<Leave>", lambda event, button=self.clean_button: button.config(bg='#800020', fg='white'))
        self.clean_button.place(relx=0.16, rely=0.46, relwidth=0.05, relheight=0.03)

        self.delete_button = Button(self.window, text='Deletar', bg='#800020', fg='white', bd=3, font=('garamond', 11, 'bold'), command=self.delete_stock,
        activebackground='#92000a', activeforeground='white')
        self.delete_button.bind("<Enter>", lambda event, button=self.delete_button: button.config(bg='#92000a', fg='white'))
        self.delete_button.bind("<Leave>", lambda event, button=self.delete_button: button.config(bg='#800020', fg='white'))
        self.delete_button.place(relx=0.09, rely=0.46, relwidth=0.05, relheight=0.03)

        self.update_button = Button(self.window, text='Atualizar', bg='#800020', fg='white', bd=3, font=('garamond', 11, 'bold'), command=self.update_info, activebackground='#92000a', activeforeground='white')
        self.update_button.bind("<Enter>", lambda event, button=self.update_button: button.config(bg='#92000a', fg='white'))
        self.update_button.bind("<Leave>", lambda event, button=self.update_button: button.config(bg='#800020', fg='white'))
        self.update_button.place(relx=0.23, rely=0.46, relwidth=0.05, relheight=0.03)

        self.five_days_button = Button(self.frame_graph_buttons, text='5 DIAS', bg='black', fg='white', bd=3, font=('garamond', 11, 'bold'), activebackground='#92000a',
        activeforeground='white', command=self.five_days)
        self.five_days_button.bind("<1>", lambda event, button=self.five_days_button: button.config(bg='#92000a'))
        self.five_days_button.place(relx=0.15, rely=0.16, relheight=0.6, relwidth=0.1)

        self.thirty_days_button = Button(self.frame_graph_buttons, text='30 DIAS', bg='black', fg='white', bd=3, font=('garamond', 11, 'bold'), activebackground='#92000a',
        activeforeground='white', command=self.thirty_days)
        self.thirty_days_button.bind("<1>", lambda event, button=self.thirty_days_button: button.config(bg='#92000a'))
        self.thirty_days_button.place(relx=0.45, rely=0.16, relheight=0.6, relwidth=0.1, )

        self.year_button = Button(self.frame_graph_buttons, text='1 ANO', bg='black', fg='white', bd=3, font=('garamond', 11, 'bold'), activebackground='#92000a', activeforeground='white', command=self.year)
        self.year_button.bind("<1>", lambda event, button=self.year_button: button.config(bg='#92000a'))
        self.year_button.place(relx=0.75, rely=0.16, relheight=0.6, relwidth=0.1)

        self.pt_language_button = Button(self.window, image=self.pt_br_img, bg='#800020', activebackground='#92000a',
                                         command=self.pt_language)
        self.pt_language_button.place(relx=0.003, rely=0.01, relwidth=0.02, relheight=0.025)
        self.pt_language_button.bind("<Enter>", lambda event, button=self.pt_language_button: button.config(bg='#92000a', fg='white'))
        self.pt_language_button.bind("<Leave>", lambda event, button=self.pt_language_button: button.config(bg='#800020', fg='white'))

        self.usa_language_button = Button(self.window, image=self.usa_img, bg='#800020', activebackground='#92000a', command=self.usa_language)
        self.usa_language_button.place(relx=0.028, rely=0.01, relwidth=0.02, relheight=0.025)
        self.usa_language_button.bind("<Enter>", lambda event, button=self.usa_language_button: button.config(bg='#92000a', fg='white'))
        self.usa_language_button.bind("<Leave>", lambda event, button=self.usa_language_button: button.config(bg='#800020', fg='white'))

        self.china_language_button = Button(self.window, image=self.china_img, bg='#800020', activebackground='#92000a', command=self.china_language)
        self.china_language_button.place(relx=0.053, rely=0.01, relwidth=0.02, relheight=0.025)
        self.china_language_button.bind("<Enter>", lambda event, button=self.china_language_button: button.config(bg='#92000a', fg='white'))
        self.china_language_button.bind("<Leave>", lambda event, button=self.china_language_button: button.config(bg='#800020', fg='white'))

    def texts(self):
        self.ticker_text = Label(self.window, text='Ticker', bg='#880808', fg='white', font=('garamond', 13, 'bold'))
        self.ticker_text.place(relx=0.008, rely=0.31, relwidth=0.05, relheight=0.025)

        self.amount_text = Label(self.window, text='Quantidade', bg='#880808', fg='white', font=('garamond', 13, 'bold'))
        self.amount_text.place(relx=0.018, rely=0.375, relwidth=0.05, relheight=0.025)

        self.me = Label(self.window, text='@matheushio7', bg='#880808', fg='black', font=('garamond', 10, 'bold'))
        self.me.place(relx=0.89, rely=0.975, relwidth=0.05, relheight=0.025)

    def entries(self):
        self.ticker_entry = Entry(self.window, font=('garamond', 13))
        self.ticker_entry.place(relx=0.02, rely=0.335, relwidth=0.05, relheight=0.025)

        self.amount_entry = Spinbox(self.window, from_=0, to=100000000000000, font=('garamond', 13))
        self.amount_entry.place(relx=0.02, rely=0.4, relwidth=0.05, relheight=0.025)

    def ticker_aumont_table(self, language='pt'):
        self.ticker_amount_table = ttk.Treeview(self.frame_tabela_ticker_amount, height=3, columns=('column1', 'column2'))
        self.ticker_amount_table.configure(height=5, show='headings')
        self.ticker_amount_table.heading('#1', text='Ticker')
        self.ticker_amount_table.heading('#2', text='Quantidade')

        self.ticker_amount_table.column('#1', width=10)
        self.ticker_amount_table.column('#2', width=10)

        style = ttk.Style()
        style.configure("Treeview.Heading", font=("garamond", 12, "bold"))
        style.configure('Treeview', font=('garamond', 12))
        self.ticker_amount_table.place(relx=0, rely=0, relwidth=0.95, relheight=1)

        self.scrool_ticker_amount_table = Scrollbar(self.frame_tabela_ticker_amount, orient='vertical', command=self.ticker_amount_table.yview)
        self.ticker_amount_table.configure(yscroll=self.scrool_ticker_amount_table.set)
        self.scrool_ticker_amount_table.place(relx=0.94, rely=0.001, relwidth=0.06, relheight=0.9999)

        self.ticker_amount_table.bind('<Double-1>', self.on_double_click)

Aplication()